name: Build PHP wrapper
description: Build PHP wrapper
inputs:
    os:
        description: Target OS
        required: true
    target:
        description: Target
        required: true
    php-version:
        description: PHP version
        required: true
    github-token:
        description: GitHub token
        required: true
    engine-version:
        description: Engine version
        required: true

runs:
    using: composite
    steps:
        - name: Setup PHP
          uses: shivammathur/setup-php@v2
          with:
              php-version: ${{ inputs.php-version }}
              extensions: tokenizer, json, ctype, iconv, mbstring
              tools: none
          env:
              runner: self-hosted

        - name: Install system dependencies (Ubuntu)
          if: ${{ inputs.os == 'ubuntu' }}
          shell: bash
          run: |
              sudo apt-get update
              sudo apt-get install -y \
                  php${{ inputs.php-version }}-dev \
                  php${{ inputs.php-version }}-cli \
                  build-essential \
                  autoconf \
                  automake \
                  libtool \
                  pkg-config \
                  libssl-dev \
                  unzip \
                  clang-format \
                  cppcheck

        - name: Install system dependencies (macOS)
          if: ${{ inputs.os == 'macos' }}
          shell: bash
          run: |
              brew install autoconf automake libtool pkg-config protobuf@3 openssl clang-format cppcheck

        - name: Install protobuf compiler (Ubuntu)
          if: ${{ inputs.os == 'ubuntu' }}
          shell: bash
          run: |
              PB_REL="https://github.com/protocolbuffers/protobuf/releases"
              curl -LO $PB_REL/download/v3.20.3/protoc-3.20.3-linux-x86_64.zip
              unzip protoc-3.20.3-linux-x86_64.zip -d $HOME/.local
              echo "$HOME/.local/bin" >> $GITHUB_PATH
              # Install protobuf-c-compiler
              sudo apt-get install -y protobuf-c-compiler

        - name: Install protobuf compiler (macOS)
          if: ${{ inputs.os == 'macos' }}
          shell: bash
          run: |
              echo 'export PATH="/opt/homebrew/opt/protobuf@3/bin:$PATH"' >> $GITHUB_ENV
              # Install protobuf-c
              brew install protobuf-c

        - name: Install shared software dependencies
          uses: ./.github/workflows/install-shared-dependencies
          with:
              os: ${{ inputs.os }}
              target: ${{ inputs.target }}
              github-token: ${{ inputs.github-token }}
              engine-version: ${{ inputs.engine-version }}

        - name: Install Rust and Cargo
          uses: ./.github/workflows/install-rust-and-protoc
          with:
              github-token: ${{ inputs.github-token }}

        - name: Install ziglang (Ubuntu)
          if: ${{ inputs.os == 'ubuntu' }}
          shell: bash
          run: |
              pip3 install ziglang
              cargo install --locked cargo-zigbuild

        - name: Build FFI library
          shell: bash
          working-directory: ffi
          run: |
              if [[ "${{ inputs.os }}" == "ubuntu" ]]; then
                  cargo zigbuild --target ${{ inputs.target }} --release
              else
                  cargo build --target ${{ inputs.target }} --release
              fi

        - name: Initialize PHP extension build system
          shell: bash
          working-directory: php
          run: |
              phpize

        - name: Configure PHP extension
          shell: bash
          working-directory: php
          run: |
              ./configure --enable-valkey-glide

        - name: Generate protobuf and bindings
          shell: bash
          working-directory: php
          run: |
              make generate-bindings generate-proto

        - name: Build PHP extension
          shell: bash
          working-directory: php
          run: |
              make

        - name: Install PHP extension
          shell: bash
          working-directory: php
          run: |
              make install

        - name: Verify extension installation
          shell: bash
          run: |
              php -m | grep valkey_glide || echo "Extension not found in module list"
              php --ri valkey_glide || echo "Extension info not available"
